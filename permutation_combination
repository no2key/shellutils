#!/bin/bash
# permutation_combination

arg0=-1
sep=${4:-,}
argv=${3:-p}
number=${2:-3}
eval ary=({1..${1:-4}})
length=${#ary[@]}
((limit=length-number))
(( number > length )) && exit 1

invoke(){ echo $(argums ${argu} loop -1) getseq $(argums ${argu}); }
argums(){ loop i ${1} number${2} $(eval eval echo \\\$\{{3..${#}}\}); }
permut(){ echo -n "${1} arg${i} ${2} "; (( ${#} != 0 )) && echo -n " length "; }
combin(){ (( ${#} != 0 )) && echo -n "${1} arg$((i+1)) arg${i} limit+$((i+1)) " || echo -n "arg$((i+1)) "; }
getseq(){ num=0; for i in ${@}; do echo -n ${ary[${!i}]}; (( ++num != number )) && echo -n "${sep}"; done; echo; }

loop()
{ 
   local arc arg
   arg=${1//arg}
   for((${1}=${2}+1; ${1}<${3}; ++${1})); do
        if [[ ${1//[0-9]} == arg ]]; then
              for((arc=1; arc!=arg; ++arc)); do
                   (( ${1} == arg${arc} )) && continue 2
              done
        fi
        eval eval \\\$\{{4..${#}}\}
   done
}

case ${argv} in
     P|p) argu="-0 +1 permut" ;;
     C|c) argu="-1 +0 combin" ;;
     *  ) exit 1              ;;
esac

$(invoke)
